# Description
# This patch enables colored text in the status bar. It changes the way colors
# are defined in config.h, allowing the user to define multiple color
# combinations for use in their status script.
#
# Configuration
# Download the patch and apply it according to the general instructions.
# Modify the colors definition in 'config.h' to suit your needs. Make sure to
# define at least 3 colors as they will be used for 'normal', 'selected', and
# 'urgent' windows, respectively.
#
# Usage
# Add code to your status script to output the raw characters '\x03' to switch
# to the 'urgent' color, or '\x04' to switch to the 4th defined color, etc. Note
# that the color indices in the status text are +1 from the definition in
# 'config.h' (because '\0' is the string terminator). To switch back to the
# normal text color use '\x01'. To enter the raw character '\x01' in vim, press
# ctrl+v followed by x, 0, and 1 in that order. '\x01' gives the first
# character, which appears as a bold "A" on the screen to distinguish it from
# the regular character A.
#
# Example
# The following definition in 'config.h':
# #define NUMCOLORS         4
# static const char colors[NUMCOLORS][MAXCOLORS][8] = {
#     // border   foreground background
#     { "#000033", "#dddddd", "#000033" },  // normal
#     { "#000088", "#ffffff", "#000088" },  // selected
#     { "#ff0000", "#000000", "#ffff00" },  // urgent/warning  (black on yellow)
#     { "#ff0000", "#ffffff", "#ff0000" },  // error (white on red)
#     // add more here
# };
# A really silly example:
# echo -e "normal \x01 selected \x03 warning/urgent \x04 error \x01 back to
# normal text" | dwm
# An example status script snippet to take advantage of the colors:
# status=""
# if [$batperc -le 10]; then
#     # use "warning" color
#     status+="\x03 BAT: $batperc"
# elif [$batperc -le 5]; then
#     # use "error" color
#     status+="\x04 BAT: $batperc"
# else
#     # default is normal color
#     status+="BAT: $batperc"
# fi
# # switch back to normal color for date
# status+="\x01| "+$(date)
# echo -e $status

diff --git a/config.def.h b/config.def.h
index 1c0b587..ae757ce 100644
--- a/config.def.h
+++ b/config.def.h
@@ -12,10 +12,16 @@ static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
+static const char col_black[]       = "#000000";
+static const char col_red[]         = "#ff0000";
+static const char col_yellow[]      = "#ffff00";
+static const char col_white[]       = "#ffffff";
 static const char *colors[][3]      = {
 	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	[SchemeNorm] =   { col_gray3, col_gray1,  col_gray2 },
+	[SchemeSel]  =   { col_gray4, col_cyan,   col_cyan },
+	[SchemeWarn] =	 { col_gray3, col_yellow, col_red },
+	[SchemeUrgent]=	 { col_white, col_red,    col_red },
 };
 
 /* tagging */
diff --git a/dwm.c b/dwm.c
index 664c527..5417fa0 100644
--- a/dwm.c
+++ b/dwm.c
@@ -59,7 +59,7 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeWarn, SchemeUrgent }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -700,13 +700,27 @@ drawbar(Monitor *m)
 	int boxs = drw->fonts->h / 9;
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
+	char *ts = stext;
+	char *tp = stext;
+	int tx = 0;
+	char ctmp;
 	Client *c;
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
 		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
+		while (1) {
+			if ((unsigned int)*ts > LENGTH(colors)) { ts++; continue ; }
+			ctmp = *ts;
+			*ts = '\0';
+			drw_text(drw, m->ww - tw + tx, 0, tw - tx, bh, 0, tp, 0);
+			tx += TEXTW(tp) -lrpad;
+			if (ctmp == '\0') { break; }
+			drw_setscheme(drw, scheme[(unsigned int)(ctmp-1)]);
+			*ts = ctmp;
+			tp = ++ts;
+		}
 	}
 
 	for (c = m->clients; c; c = c->next) {
